// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type TaskFilterType struct {
	And           []*TaskFilterType `json:"AND"`
	Or            []*TaskFilterType `json:"OR"`
	ID            *string           `json:"id"`
	IDNe          *string           `json:"id_ne"`
	IDGt          *string           `json:"id_gt"`
	IDLt          *string           `json:"id_lt"`
	IDGte         *string           `json:"id_gte"`
	IDLte         *string           `json:"id_lte"`
	IDIn          []string          `json:"id_in"`
	Title         *string           `json:"title"`
	TitleNe       *string           `json:"title_ne"`
	TitleGt       *string           `json:"title_gt"`
	TitleLt       *string           `json:"title_lt"`
	TitleGte      *string           `json:"title_gte"`
	TitleLte      *string           `json:"title_lte"`
	TitleIn       []string          `json:"title_in"`
	TitleLike     *string           `json:"title_like"`
	TitlePrefix   *string           `json:"title_prefix"`
	TitleSuffix   *string           `json:"title_suffix"`
	Completed     *bool             `json:"completed"`
	CompletedNe   *bool             `json:"completed_ne"`
	CompletedGt   *bool             `json:"completed_gt"`
	CompletedLt   *bool             `json:"completed_lt"`
	CompletedGte  *bool             `json:"completed_gte"`
	CompletedLte  *bool             `json:"completed_lte"`
	CompletedIn   []bool            `json:"completed_in"`
	DueDate       *time.Time        `json:"dueDate"`
	DueDateNe     *time.Time        `json:"dueDate_ne"`
	DueDateGt     *time.Time        `json:"dueDate_gt"`
	DueDateLt     *time.Time        `json:"dueDate_lt"`
	DueDateGte    *time.Time        `json:"dueDate_gte"`
	DueDateLte    *time.Time        `json:"dueDate_lte"`
	DueDateIn     []*time.Time      `json:"dueDate_in"`
	AssigneeID    *string           `json:"assigneeId"`
	AssigneeIDNe  *string           `json:"assigneeId_ne"`
	AssigneeIDGt  *string           `json:"assigneeId_gt"`
	AssigneeIDLt  *string           `json:"assigneeId_lt"`
	AssigneeIDGte *string           `json:"assigneeId_gte"`
	AssigneeIDLte *string           `json:"assigneeId_lte"`
	AssigneeIDIn  []string          `json:"assigneeId_in"`
	State         *int              `json:"state"`
	StateNe       *int              `json:"state_ne"`
	StateGt       *int              `json:"state_gt"`
	StateLt       *int              `json:"state_lt"`
	StateGte      *int              `json:"state_gte"`
	StateLte      *int              `json:"state_lte"`
	StateIn       []int             `json:"state_in"`
	UpdatedAt     *int              `json:"updatedAt"`
	UpdatedAtNe   *int              `json:"updatedAt_ne"`
	UpdatedAtGt   *int              `json:"updatedAt_gt"`
	UpdatedAtLt   *int              `json:"updatedAt_lt"`
	UpdatedAtGte  *int              `json:"updatedAt_gte"`
	UpdatedAtLte  *int              `json:"updatedAt_lte"`
	UpdatedAtIn   []int             `json:"updatedAt_in"`
	CreatedAt     *int              `json:"createdAt"`
	CreatedAtNe   *int              `json:"createdAt_ne"`
	CreatedAtGt   *int              `json:"createdAt_gt"`
	CreatedAtLt   *int              `json:"createdAt_lt"`
	CreatedAtGte  *int              `json:"createdAt_gte"`
	CreatedAtLte  *int              `json:"createdAt_lte"`
	CreatedAtIn   []int             `json:"createdAt_in"`
	DeletedBy     *string           `json:"deletedBy"`
	DeletedByNe   *string           `json:"deletedBy_ne"`
	DeletedByGt   *string           `json:"deletedBy_gt"`
	DeletedByLt   *string           `json:"deletedBy_lt"`
	DeletedByGte  *string           `json:"deletedBy_gte"`
	DeletedByLte  *string           `json:"deletedBy_lte"`
	DeletedByIn   []string          `json:"deletedBy_in"`
	UpdatedBy     *string           `json:"updatedBy"`
	UpdatedByNe   *string           `json:"updatedBy_ne"`
	UpdatedByGt   *string           `json:"updatedBy_gt"`
	UpdatedByLt   *string           `json:"updatedBy_lt"`
	UpdatedByGte  *string           `json:"updatedBy_gte"`
	UpdatedByLte  *string           `json:"updatedBy_lte"`
	UpdatedByIn   []string          `json:"updatedBy_in"`
	CreatedBy     *string           `json:"createdBy"`
	CreatedByNe   *string           `json:"createdBy_ne"`
	CreatedByGt   *string           `json:"createdBy_gt"`
	CreatedByLt   *string           `json:"createdBy_lt"`
	CreatedByGte  *string           `json:"createdBy_gte"`
	CreatedByLte  *string           `json:"createdBy_lte"`
	CreatedByIn   []string          `json:"createdBy_in"`
	Assignee      *UserFilterType   `json:"assignee"`
}

type UserFilterType struct {
	And             []*UserFilterType `json:"AND"`
	Or              []*UserFilterType `json:"OR"`
	ID              *string           `json:"id"`
	IDNe            *string           `json:"id_ne"`
	IDGt            *string           `json:"id_gt"`
	IDLt            *string           `json:"id_lt"`
	IDGte           *string           `json:"id_gte"`
	IDLte           *string           `json:"id_lte"`
	IDIn            []string          `json:"id_in"`
	Email           *string           `json:"email"`
	EmailNe         *string           `json:"email_ne"`
	EmailGt         *string           `json:"email_gt"`
	EmailLt         *string           `json:"email_lt"`
	EmailGte        *string           `json:"email_gte"`
	EmailLte        *string           `json:"email_lte"`
	EmailIn         []string          `json:"email_in"`
	EmailLike       *string           `json:"email_like"`
	EmailPrefix     *string           `json:"email_prefix"`
	EmailSuffix     *string           `json:"email_suffix"`
	FirstName       *string           `json:"firstName"`
	FirstNameNe     *string           `json:"firstName_ne"`
	FirstNameGt     *string           `json:"firstName_gt"`
	FirstNameLt     *string           `json:"firstName_lt"`
	FirstNameGte    *string           `json:"firstName_gte"`
	FirstNameLte    *string           `json:"firstName_lte"`
	FirstNameIn     []string          `json:"firstName_in"`
	FirstNameLike   *string           `json:"firstName_like"`
	FirstNamePrefix *string           `json:"firstName_prefix"`
	FirstNameSuffix *string           `json:"firstName_suffix"`
	LastName        *string           `json:"lastName"`
	LastNameNe      *string           `json:"lastName_ne"`
	LastNameGt      *string           `json:"lastName_gt"`
	LastNameLt      *string           `json:"lastName_lt"`
	LastNameGte     *string           `json:"lastName_gte"`
	LastNameLte     *string           `json:"lastName_lte"`
	LastNameIn      []string          `json:"lastName_in"`
	LastNameLike    *string           `json:"lastName_like"`
	LastNamePrefix  *string           `json:"lastName_prefix"`
	LastNameSuffix  *string           `json:"lastName_suffix"`
	State           *int              `json:"state"`
	StateNe         *int              `json:"state_ne"`
	StateGt         *int              `json:"state_gt"`
	StateLt         *int              `json:"state_lt"`
	StateGte        *int              `json:"state_gte"`
	StateLte        *int              `json:"state_lte"`
	StateIn         []int             `json:"state_in"`
	UpdatedAt       *int              `json:"updatedAt"`
	UpdatedAtNe     *int              `json:"updatedAt_ne"`
	UpdatedAtGt     *int              `json:"updatedAt_gt"`
	UpdatedAtLt     *int              `json:"updatedAt_lt"`
	UpdatedAtGte    *int              `json:"updatedAt_gte"`
	UpdatedAtLte    *int              `json:"updatedAt_lte"`
	UpdatedAtIn     []int             `json:"updatedAt_in"`
	CreatedAt       *int              `json:"createdAt"`
	CreatedAtNe     *int              `json:"createdAt_ne"`
	CreatedAtGt     *int              `json:"createdAt_gt"`
	CreatedAtLt     *int              `json:"createdAt_lt"`
	CreatedAtGte    *int              `json:"createdAt_gte"`
	CreatedAtLte    *int              `json:"createdAt_lte"`
	CreatedAtIn     []int             `json:"createdAt_in"`
	DeletedBy       *string           `json:"deletedBy"`
	DeletedByNe     *string           `json:"deletedBy_ne"`
	DeletedByGt     *string           `json:"deletedBy_gt"`
	DeletedByLt     *string           `json:"deletedBy_lt"`
	DeletedByGte    *string           `json:"deletedBy_gte"`
	DeletedByLte    *string           `json:"deletedBy_lte"`
	DeletedByIn     []string          `json:"deletedBy_in"`
	UpdatedBy       *string           `json:"updatedBy"`
	UpdatedByNe     *string           `json:"updatedBy_ne"`
	UpdatedByGt     *string           `json:"updatedBy_gt"`
	UpdatedByLt     *string           `json:"updatedBy_lt"`
	UpdatedByGte    *string           `json:"updatedBy_gte"`
	UpdatedByLte    *string           `json:"updatedBy_lte"`
	UpdatedByIn     []string          `json:"updatedBy_in"`
	CreatedBy       *string           `json:"createdBy"`
	CreatedByNe     *string           `json:"createdBy_ne"`
	CreatedByGt     *string           `json:"createdBy_gt"`
	CreatedByLt     *string           `json:"createdBy_lt"`
	CreatedByGte    *string           `json:"createdBy_gte"`
	CreatedByLte    *string           `json:"createdBy_lte"`
	CreatedByIn     []string          `json:"createdBy_in"`
	Tasks           *TaskFilterType   `json:"tasks"`
}

type TaskSortType string

const (
	TaskSortTypeIDAsc          TaskSortType = "ID_ASC"
	TaskSortTypeIDDesc         TaskSortType = "ID_DESC"
	TaskSortTypeTitleAsc       TaskSortType = "TITLE_ASC"
	TaskSortTypeTitleDesc      TaskSortType = "TITLE_DESC"
	TaskSortTypeCompletedAsc   TaskSortType = "COMPLETED_ASC"
	TaskSortTypeCompletedDesc  TaskSortType = "COMPLETED_DESC"
	TaskSortTypeDueDateAsc     TaskSortType = "DUE_DATE_ASC"
	TaskSortTypeDueDateDesc    TaskSortType = "DUE_DATE_DESC"
	TaskSortTypeAssigneeIDAsc  TaskSortType = "ASSIGNEE_ID_ASC"
	TaskSortTypeAssigneeIDDesc TaskSortType = "ASSIGNEE_ID_DESC"
	TaskSortTypeStateAsc       TaskSortType = "STATE_ASC"
	TaskSortTypeStateDesc      TaskSortType = "STATE_DESC"
	TaskSortTypeUpdatedAtAsc   TaskSortType = "UPDATED_AT_ASC"
	TaskSortTypeUpdatedAtDesc  TaskSortType = "UPDATED_AT_DESC"
	TaskSortTypeCreatedAtAsc   TaskSortType = "CREATED_AT_ASC"
	TaskSortTypeCreatedAtDesc  TaskSortType = "CREATED_AT_DESC"
	TaskSortTypeDeletedByAsc   TaskSortType = "DELETED_BY_ASC"
	TaskSortTypeDeletedByDesc  TaskSortType = "DELETED_BY_DESC"
	TaskSortTypeUpdatedByAsc   TaskSortType = "UPDATED_BY_ASC"
	TaskSortTypeUpdatedByDesc  TaskSortType = "UPDATED_BY_DESC"
	TaskSortTypeCreatedByAsc   TaskSortType = "CREATED_BY_ASC"
	TaskSortTypeCreatedByDesc  TaskSortType = "CREATED_BY_DESC"
)

var AllTaskSortType = []TaskSortType{
	TaskSortTypeIDAsc,
	TaskSortTypeIDDesc,
	TaskSortTypeTitleAsc,
	TaskSortTypeTitleDesc,
	TaskSortTypeCompletedAsc,
	TaskSortTypeCompletedDesc,
	TaskSortTypeDueDateAsc,
	TaskSortTypeDueDateDesc,
	TaskSortTypeAssigneeIDAsc,
	TaskSortTypeAssigneeIDDesc,
	TaskSortTypeStateAsc,
	TaskSortTypeStateDesc,
	TaskSortTypeUpdatedAtAsc,
	TaskSortTypeUpdatedAtDesc,
	TaskSortTypeCreatedAtAsc,
	TaskSortTypeCreatedAtDesc,
	TaskSortTypeDeletedByAsc,
	TaskSortTypeDeletedByDesc,
	TaskSortTypeUpdatedByAsc,
	TaskSortTypeUpdatedByDesc,
	TaskSortTypeCreatedByAsc,
	TaskSortTypeCreatedByDesc,
}

func (e TaskSortType) IsValid() bool {
	switch e {
	case TaskSortTypeIDAsc, TaskSortTypeIDDesc, TaskSortTypeTitleAsc, TaskSortTypeTitleDesc, TaskSortTypeCompletedAsc, TaskSortTypeCompletedDesc, TaskSortTypeDueDateAsc, TaskSortTypeDueDateDesc, TaskSortTypeAssigneeIDAsc, TaskSortTypeAssigneeIDDesc, TaskSortTypeStateAsc, TaskSortTypeStateDesc, TaskSortTypeUpdatedAtAsc, TaskSortTypeUpdatedAtDesc, TaskSortTypeCreatedAtAsc, TaskSortTypeCreatedAtDesc, TaskSortTypeDeletedByAsc, TaskSortTypeDeletedByDesc, TaskSortTypeUpdatedByAsc, TaskSortTypeUpdatedByDesc, TaskSortTypeCreatedByAsc, TaskSortTypeCreatedByDesc:
		return true
	}
	return false
}

func (e TaskSortType) String() string {
	return string(e)
}

func (e *TaskSortType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskSortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskSortType", str)
	}
	return nil
}

func (e TaskSortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserSortType string

const (
	UserSortTypeIDAsc         UserSortType = "ID_ASC"
	UserSortTypeIDDesc        UserSortType = "ID_DESC"
	UserSortTypeEmailAsc      UserSortType = "EMAIL_ASC"
	UserSortTypeEmailDesc     UserSortType = "EMAIL_DESC"
	UserSortTypeFirstNameAsc  UserSortType = "FIRST_NAME_ASC"
	UserSortTypeFirstNameDesc UserSortType = "FIRST_NAME_DESC"
	UserSortTypeLastNameAsc   UserSortType = "LAST_NAME_ASC"
	UserSortTypeLastNameDesc  UserSortType = "LAST_NAME_DESC"
	UserSortTypeStateAsc      UserSortType = "STATE_ASC"
	UserSortTypeStateDesc     UserSortType = "STATE_DESC"
	UserSortTypeUpdatedAtAsc  UserSortType = "UPDATED_AT_ASC"
	UserSortTypeUpdatedAtDesc UserSortType = "UPDATED_AT_DESC"
	UserSortTypeCreatedAtAsc  UserSortType = "CREATED_AT_ASC"
	UserSortTypeCreatedAtDesc UserSortType = "CREATED_AT_DESC"
	UserSortTypeDeletedByAsc  UserSortType = "DELETED_BY_ASC"
	UserSortTypeDeletedByDesc UserSortType = "DELETED_BY_DESC"
	UserSortTypeUpdatedByAsc  UserSortType = "UPDATED_BY_ASC"
	UserSortTypeUpdatedByDesc UserSortType = "UPDATED_BY_DESC"
	UserSortTypeCreatedByAsc  UserSortType = "CREATED_BY_ASC"
	UserSortTypeCreatedByDesc UserSortType = "CREATED_BY_DESC"
)

var AllUserSortType = []UserSortType{
	UserSortTypeIDAsc,
	UserSortTypeIDDesc,
	UserSortTypeEmailAsc,
	UserSortTypeEmailDesc,
	UserSortTypeFirstNameAsc,
	UserSortTypeFirstNameDesc,
	UserSortTypeLastNameAsc,
	UserSortTypeLastNameDesc,
	UserSortTypeStateAsc,
	UserSortTypeStateDesc,
	UserSortTypeUpdatedAtAsc,
	UserSortTypeUpdatedAtDesc,
	UserSortTypeCreatedAtAsc,
	UserSortTypeCreatedAtDesc,
	UserSortTypeDeletedByAsc,
	UserSortTypeDeletedByDesc,
	UserSortTypeUpdatedByAsc,
	UserSortTypeUpdatedByDesc,
	UserSortTypeCreatedByAsc,
	UserSortTypeCreatedByDesc,
}

func (e UserSortType) IsValid() bool {
	switch e {
	case UserSortTypeIDAsc, UserSortTypeIDDesc, UserSortTypeEmailAsc, UserSortTypeEmailDesc, UserSortTypeFirstNameAsc, UserSortTypeFirstNameDesc, UserSortTypeLastNameAsc, UserSortTypeLastNameDesc, UserSortTypeStateAsc, UserSortTypeStateDesc, UserSortTypeUpdatedAtAsc, UserSortTypeUpdatedAtDesc, UserSortTypeCreatedAtAsc, UserSortTypeCreatedAtDesc, UserSortTypeDeletedByAsc, UserSortTypeDeletedByDesc, UserSortTypeUpdatedByAsc, UserSortTypeUpdatedByDesc, UserSortTypeCreatedByAsc, UserSortTypeCreatedByDesc:
		return true
	}
	return false
}

func (e UserSortType) String() string {
	return string(e)
}

func (e *UserSortType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserSortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserSortType", str)
	}
	return nil
}

func (e UserSortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
